newiris$Species <- NULL
(kc <- clara(newiris, 4))
newiris <- iris
newiris$Species <- NULL
(kc <- kmeans(newiris, 4))
plot(newiris[c("Sepal.Length", "Sepal.Width")], col=kc$cluster)
points(kc$centers[,c("Sepal.Length", "Sepal.Width")], col=1:3, pch=8, cex=2)
(kc <- kmeans(newiris, 2))
plot(newiris[c("Sepal.Length", "Sepal.Width")], col=kc$cluster)
points(kc$centers[,c("Sepal.Length", "Sepal.Width")], col=1:3, pch=8, cex=2)
(kc <- kmeans(newiris, 8))
plot(newiris[c("Sepal.Length", "Sepal.Width")], col=kc$cluster)
points(kc$centers[,c("Sepal.Length", "Sepal.Width")], col=1:3, pch=8, cex=2)
(kc <- kmeans(newiris, 3))
plot(newiris[c("Sepal.Length", "Sepal.Width")], col=kc$cluster)
points(kc$centers[,c("Sepal.Length", "Sepal.Width")], col=1:3, pch=8, cex=2)
install.packages("cluster")
library("cluster")
(kc <- clara(newiris, 3))
plot(newiris[c("Sepal.Length", "Sepal.Width")], col=kc$cluster)
points(kc$centers[,c("Sepal.Length", "Sepal.Width")], col=1:3, pch=8, cex=2)
(kc <- clara(newiris, 3))
plot(newiris[c("Sepal.Length", "Sepal.Width")], col=kc$cluster)
points(kc$centers[,c("Sepal.Length", "Sepal.Width")], col=1:3, pch=8, cex=2)
newiris <- iris
newiris$Species <- NULL
(kc <- clara(newiris, 3))
plot(newiris[c("Sepal.Length", "Sepal.Width")], col=kc$cluster)
points(kc$centers[,c("Sepal.Length", "Sepal.Width")], col=1:3, pch=8, cex=2)
(kc <- kmeans(newiris, 3))
plot(newiris[c("Sepal.Length", "Sepal.Width")], col=kc$cluster)
points(kc$centers[,c("Sepal.Length", "Sepal.Width")], col=1:3, pch=8, cex=2)
(kc <- pman(newiris, 3))
(kc <- pam(newiris, 3))
plot(newiris[c("Sepal.Length", "Sepal.Width")], col=kc$cluster)
points(kc$centers[,c("Sepal.Length", "Sepal.Width")], col=1:3, pch=8, cex=2)
plot(newiris[c("Sepal.Length", "Sepal.Width")], col=kc$cluster)
(kc <- kmeans(newiris, 3))
plot(newiris[c("Sepal.Length", "Sepal.Width")], col=kc$cluster)
(kc <- pam(newiris, 3))
plot(newiris[c("Sepal.Length", "Sepal.Width")], col=kc$cluster)
newiris$Species <- NULL
(kc <- pam(newiris, 2))
plot(newiris[c("Sepal.Length", "Sepal.Width")], col=kc$cluster)
points(kc$centers[,c("Sepal.Length", "Sepal.Width")], col=1:3, pch=8, cex=2)
newiris$Species <- NULL
(kc <- kmeans(newiris, 2))
plot(newiris[c("Sepal.Length", "Sepal.Width")], col=kc$cluster)
points(kc$centers[,c("Sepal.Length", "Sepal.Width")], col=1:3, pch=8, cex=2)
points(kc$centers[,c("Sepal.Length", "Sepal.Width")], col=1:2, pch=8, cex=2)
points(kc$centers[,c("Sepal.Length", "Sepal.Width")], col=1:2, pch=8, cex=2)
plot(newiris[c("Sepal.Length", "Sepal.Width")], col=kc$cluster)
points(kc$centers[,c("Sepal.Length", "Sepal.Width")], col=1:2, pch=8, cex=2)
plot(newiris[c("Sepal.Length", "Sepal.Width")], col=kc$cluster)
points(kc$centers[,c("Sepal.Length", "Sepal.Width")], col=1:4, pch=16, cex=2)
plot(newiris[c("Petal.Length", "Petal.Width")], col=kc$cluster)
points(kc$centers[,c("Petal.Length", "Petal.Width")], col=1:4, pch=16, cex=2)
points(kc$centers[,c("Petal.Length", "Petal.Width")], col=1:2, pch=16, cex=2)
,
plot(newiris[c("Petal.Length", "Petal.Width")], col=kc$cluster)
points(kc$centers[,c("Petal.Length", "Petal.Width")], col=1:2, pch=16, cex=2)
plot(newiris[c("Petal.Length", "Petal.Width")], col=kc$cluster)
points(kc$centers[,c("Petal.Length", "Petal.Width")], col=1:2, pch=16, cex=2)
plot(newiris[c("Sepal.Length", "Petal.Width")], col=kc$cluster)
points(kc$centers[,c("Sepal.Length", "Petal.Width")], col=1:2, pch=16, cex=2)
plot(newiris[c("Sepal.Length", "Petal.Length")], col=kc$cluster)
points(kc$centers[,c("Sepal.Length", "Petal.Length")], col=1:2, pch=16, cex=2)
(kc <- clara(newiris, 2))
plot(newiris[c("Sepal.Length", "Sepal.Width")], col=kc$cluster)
points(kc$centers[,c("Sepal.Length", "Sepal.Width")], col=1:4, pch=16, cex=2)
plot(newiris[c("Sepal.Length", "Petal.Length")], col=kc$cluster)
points(kc$centers[,c("Sepal.Length", "Petal.Length")], col=1:2, pch=16, cex=2)
(kc <- kmeans(newiris, 2))
plot(newiris[c("Sepal.Length", "Sepal.Width")], col=kc$cluster)
points(kc$centers[,c("Sepal.Length", "Sepal.Width")], col=1:4, pch=16, cex=2)
plot(newiris[c("Sepal.Length", "Petal.Length")], col=kc$cluster)
points(kc$centers[,c("Sepal.Length", "Petal.Length")], col=1:2, pch=16, cex=2)
(kc <- kmeans(newiris, 3))
plot(newiris[c("Sepal.Length", "Sepal.Width")], col=kc$cluster)
points(kc$centers[,c("Sepal.Length", "Sepal.Width")], col=1:4, pch=16, cex=2)
plot(newiris[c("Sepal.Length", "Petal.Length")], col=kc$cluster)
points(kc$centers[,c("Sepal.Length", "Petal.Length")], col=1:2, pch=16, cex=2)
points(kc$centers[,c("Sepal.Length", "Petal.Length")], col=1:3, pch=16, cex=2)
points(kc$centers[,c("Sepal.Length", "Petal.Length")], col=1:3, pch=16, cex=4)
(kc <- kmeans(newiris, 2))
plot(newiris[c("Sepal.Length", "Sepal.Width")], col=kc$cluster)
points(kc$centers[,c("Sepal.Length", "Sepal.Width")], col=1:4, pch=16, cex=2)
plot(newiris[c("Sepal.Length", "Petal.Length")], col=kc$cluster)
points(kc$centers[,c("Sepal.Length", "Petal.Length")], col=1:3, pch=16, cex=4)
(kc <- kmeans(newiris, 3))
# plot(newiris[c("Sepal.Length", "Sepal.Width")], col=kc$cluster)
# points(kc$centers[,c("Sepal.Length", "Sepal.Width")], col=1:4, pch=16, cex=2)
plot(newiris[c("Sepal.Length", "Petal.Length")], col=kc$cluster)
points(kc$centers[,c("Sepal.Length", "Petal.Length")], col=1:3, pch=16, cex=4)
(kc <- kmeans(newiris, 24))
# plot(newiris[c("Sepal.Length", "Sepal.Width")], col=kc$cluster)
# points(kc$centers[,c("Sepal.Length", "Sepal.Width")], col=1:4, pch=16, cex=2)
plot(newiris[c("Sepal.Length", "Petal.Length")], col=kc$cluster)
points(kc$centers[,c("Sepal.Length", "Petal.Length")], col=1:3, pch=16, cex=4)
(kc <- kmeans(newiris, 1))
# plot(newiris[c("Sepal.Length", "Sepal.Width")], col=kc$cluster)
# points(kc$centers[,c("Sepal.Length", "Sepal.Width")], col=1:4, pch=16, cex=2)
plot(newiris[c("Sepal.Length", "Petal.Length")], col=kc$cluster)
points(kc$centers[,c("Sepal.Length", "Petal.Length")], col=1:3, pch=16, cex=4)
points(kc$centers[,c("Sepal.Length", "Petal.Length")], col=1:1, pch=16, cex=4)
(kc <- kmeans(newiris, 2))
# plot(newiris[c("Sepal.Length", "Sepal.Width")], col=kc$cluster)
# points(kc$centers[,c("Sepal.Length", "Sepal.Width")], col=1:4, pch=16, cex=2)
plot(newiris[c("Sepal.Length", "Petal.Length")], col=kc$cluster)
points(kc$centers[,c("Sepal.Length", "Petal.Length")], col=1:2, pch=16, cex=4)
install.packages("XLConnect")
library("XLConnect")
library("XLConnect")
options(java.home="C:/Program Files/Java/jre7/")
library("XLConnect")
options(java.home="C:\Program Files (x86)\Java\jre1.8.0_73")
library("XLConnect")
options(java.home="C:\\Program Files \(x86\)\\Java\\jre1.8.0_73")
options(java.home="C:\\Program Files (x86)\\Java\\jre1.8.0_73")
library("XLConnect")
java.home
library("XLConnect")
install.packages("rjava")
install.packages("rJava")
library("XLConnect")
library ("rJava")
library ("rJava")
if(Sys.getenv("JAVA_HOME")!=""){
Sys.setenv(JAVA_HOME="")
}
library(rJava)
require(rJava)
system("java -version")
require(rJava)
library("XLConnect")
Sys.setenv(JAVA_HOME)
if(Sys.getenv("JAVA_HOME")!=""){
Sys.setenv(JAVA_HOME="")
}
JAVA_HOME
system("java -version")
require(rJava)
if(Sys.getenv("JAVA_HOME")!=""){
Sys.setenv(JAVA_HOME="")
}
Sys.setenv(JAVA_HOME='C:\\Program Files\\Java\\jre1.8.0_74') # for 64-bit version
library(rJava)
Sys.setenv(JAVA_HOME='C:\\Program Files (x86)\\Java\\jre1.8.0_73') # for 32-bit version
library(rJava)
x <- c(1:10)
(x>8)
(x<5)
(x>8) | (x<5)
x[(x>8) | (x<5)]
x <- c(1,2,3,4,5,6,7,8,9)
abs(x)	absolute value
ceiling(3.75)
x <- "abCdef"
x <- c(1,2,3,4,5,6,7,8,9)
abs(x)
sqrt(x)
ceiling(3.75)
floor(3.475)
trunc(5.91)
floor(3.775)
trunc(5.91)
floor(3.775)
round(3.475, digits=2)
cos(x); sin(x); tan(x); acos(x); cosh(x); acosh(x)
log(x)
log10(x)
exp(x)
x <- "abCdef"
substr(x, 2, 4) is "bcd"
substr(x, 2, 4)
substr(x, 2, 4) <- "22222"
x
grep("A", c("b","A","c"), fixed=TRUE)
sub("\\s",".","Hello There") returns "Hello.There"
sub("\\s",".","Hello There")
strsplit("abc", "")
paste("x",1:3,sep="")
paste("x",1:3,sep="M")
paste("Today is", date())
toupper(x)
tolower(x)
x <- "abCdef"
x <- "abCdef"
toupper(x)
tolower(x)
substr(x, 2, 4)
strsplit("abc", "")
paste("x",1:3,sep="")
paste("x",1:3,sep="M")
paste("Today is", date())
x <- "abCdef"
toupper(x)
tolower(x)
range(x)
x <- c(1,20,3,7,80,9,4,5,6)
range(x)
sum(x)
diff(x, lag=1)
scale(x, center=TRUE, scale=TRUE)
diff(x, lag=1)
mean(x, trim=0, na.rm=FALSE)
mx <- mean(x,trim=.05,na.rm=TRUE)
mxsd(x); var(x); mad(x)
mx
mean(x,trim=.05,na.rm=TRUE)
mean(x,trim=.25,na.rm=TRUE)
sd(x); var(x); mad(x)
median(x)
quantile(x, c(.3,.84))
x
median(x)
mean(x, trim=0, na.rm=FALSE)
mean(x,trim=.25,na.rm=TRUE)
sd(x); var(x); mad(x)
quantile(x, c(.3,.84))
min(x)
max(x)
range(x)
sum(x)
diff(x, lag=1)
diff(x, lag=3)
diff(x, lag=1)
scale(x, center=TRUE, scale=TRUE)
seq(1,10,2)
seq(1,10)
seq(1,10-2)
seq(1,10,2)
seq(10,1,-2)
rep(1:3, 2)
rep(1,100)
?rep
rep(1:4, each = 2, len = 4)
rep(1:4, each = 2, len = 10)
rep(1:4, each = 2, times = 3)
cut(x, 5)
rep(1:4, c(2,2,2,2))
rep(1:4, c(2,1,2,1))
rep(1:3, 2)
rep(1:4, c(2,1,2))
rep(1:4, c(2,1,2,1))
rep(1:4, each = 2, len = 10)
rep(1:4, each = 2, times = 3)
cut(x, 5)
x
pretty(c(-3,3), 30)
pretty(c(-3,3), 100)
pretty(c(-3,3), 30)
pretty(c(-3,3), 20)
dnorm(pretty(c(-3,3), 20))
plot(dnorm(pretty(c(-3,3), 20)))
pretty(c(-3,3), 20)
x <- matrix(1:10, nrow = 5, ncol = 2)
for (i in 1:nrow(x)) paste(x,sep = "H")
for (i in 1:nrow(x)) print(paste(x,sep = "H"))
x <- matrix(1:10, nrow = 5, ncol = 2)
for (i in 1:nrow(x)) print(paste(x[i],sep = "H"))
x[1]
x
x[1]
x[[1]]
x[1]
xx
x <- matrix(1:10, nrow = 5, ncol = 2)
x[1]
x
x[1,]
for (i in 1:nrow(x)) print(paste(x[i,],sep = "H"))
for (i in 1:nrow(x)) print(paste(x[i,],"h"sep = "H"))
for (i in 1:nrow(x)) print(paste(x[i,],"h",sep = "H"))
x[1,]
paste(x[1,],"h")
paste("x",1:3,sep="")
paste("x",1:3,sep="")[2]
paste("x",1:3,sep="")
for (i in 1:nrow(x)) print(paste(x[i,],"00",sep = "."))
for (i in 1:nrow(x)) print(x[i,1]/x[i,2])
if (sum(x) >= 10) {
print("it is a big matrix")
}
else {
} else {
if (sum(x) >= 10) {
print("it is a big matrix")
} else {
print("it is a small vector")
}
sum(x)
if (sum(x) >= 60) {
print("it is a big matrix")
} else {
print("it is a small vector")
}
ifelse(sum(x) >= 60,"it is a big matrix","it is a small matrix")
x
mystat <- function(x, npar=TRUe, print=TRUE){
if (npar){
y <- median(x); z <- mad(x)
result <- list(y,z)
} else {
y <- mean(x); z <- sd(x)
result <- list(y,z)
}
return(result)
}
mystat(x)
mystat <- function(x, npar=TRUE, print=TRUE){
if (npar){
y <- median(x); z <- mad(x)
result <- list(y,z)
} else {
y <- mean(x); z <- sd(x)
result <- list(y,z)
}
return(result)
}
mystat(x)
mystat <- function(x, npar=TRUE, print=TRUE){
if (npar){
y <- median(x); z <- mad(x)
result <- list("median",y,z)
} else {
y <- mean(x); z <- sd(x)
result <- list("mean",y,z)
}
return(result)
}
mystat(x)
mystat(x,npar = FALSE)
x
x[1]
x[1,2]
x[1,2] <- 12
mystat(x,npar = FALSE)
mystat(x)
mtcars
mtcars$mpg
order(mtcars$mpg)
nrow(mtcars)
mtcars[order(mtcars$mpg),]
mtcars[order(mtcars$mpg,mtcars$disp),]
mtcars[order(mtcars$cyl,mtcars$mpg),]
mtcars[order(mtcars$cyl,mtcars$mpg,decreasing = TRUE),]
mtcars[order(mtcars$cyl,mtcars$mpg),]
mtcars[order(mtcars$cyl,-mtcars$mpg),]
mtcars[order(mtcars$cyl,-mtcars$cyl),]
mtcars[order(mtcars$cyl,-mtcars$disp),]
order(mtcars$cyl)
rank(mtcars$cyl)
order(mtcars$disp)
rank(mtcars$disp)
library(MASS)
help(painters)
school <- painters$School
table(school)                 # frequency distribution
cbind(table(school))          # print in mode dataframe
# Exercise / Find the frequency distribution of the composition scores in painters.
composition <- painters$Composition
cbind(table(composition))
# Exercise / Find programmatically the school that has the most painters.
tot.school <- cbind(table(school))
tot.school[order(tot.school,decreasing = TRUE),][1]
# RELATIVE FREQUENCY DISTRIBUTION OF QUALITATIVE DATA
cbind(round(table(painters$School)
)
cbind(round(table(painters$School)) / nrow(painters), digits = 2))
cbind(round(table(painters$School))
cbind(round(table(painters$School)))
table(painters$School)
table(painters$School) / nrow(painters)
(tot.school / sum(tot.school)
tot.school / sum(tot.school)
tot.school <- cbind(table(school))
tot.school[order(tot.school,decreasing = TRUE),][1]
# RELATIVE FREQUENCY DISTRIBUTION OF QUALITATIVE DATA
cbind(round(table(painters$School) / nrow(painters), digits = 2))
round(tot.school / sum(tot.school), digits = 2)
length(composition)
composition
barplot(table(school), col=c("blue"))
# Exercise / Find the bar graph of the composition scores in painters.
barplot(table(composition), col=c("blue","violet"))
# PIE GRAPH
pie(table(school))
# Exercise / Find the bar graph of the composition scores in painters.
pie(table(composition))
# CATEGORY STATISTICS
tapply(painters$Composition, painters$School, mean)
tapply(painters$Composition, painters$School, mean)
head(painters)
tapply(painters$Composition, painters$School, mean)
tapply(painters$Drawing, painters$School, mean)
order(tapply(painters$Drawing, painters$School, mean))
order(tapply(painters$Drawing, painters$School, mean), decreasing =1)
order(cbind(tapply(painters$Drawing, painters$School, mean), decreasing =1))
order(cbind(tapply(painters$Drawing, painters$School, mean)), decreasing =1)
painters$Colour >= 14
sum(painters$Colour >= 14)
library(MASS)
head(faithful)
str(faithful)
toupper("Frequency Distribution of Quantitative Data")
range(duration)
duration <- faithful$eruptions
range(duration)
sep(1.5,5.5)
seq(1.5,5.5)
seq(1,10)
seq(1.5,5.5,bu=.5)
seq(1.5,5.5,by=.5)
cut(duration,breaks)
duration <- faithful$eruptions
range(duration)
breaks <- seq(1.5,5.5,by=.5)
cut(duration,breaks)
cut(duration,breaks,labels=FALSE)
table(duratio.cut)
duration.cut <- cut(duration,breaks,labels=FALSE)
table(duratio.cut)
table(duration.cut)
barplot(table(duration.cut))
duration.cut <- cut(duration,breaks,right=FALSE)
table(duration.cut)
barplot(table(duration.cut))
duration.cut
cut(duration,breaks,right=FALSE)
cut(duration,breaks,right=FALSE)
table(duration.cut)
duration.cut <- cut(duration,breaks)
table(duration.cut)
cut(duration,breaks)
barplot(table(duration.cut))
duration.cut <- cut(duration,breaks,right = TRUE)
table(duration.cut)
duration.cut <- cut(duration,breaks,right = FALSE)
table(duration.cut)
faithful$waiting
waiting <- faithful$waiting
range(waiting)
seq(43,96)
table(faithful$waiting)
cut(waiting, seq(40,100,by=5))
table(waiting.cut)
waiting <- faithful$waiting
range(waiting)
waiting.cut <- cut(waiting, seq(40,100,by=5))
table(waiting.cut)
barplot(table(waiting.cut))
cbind(table(waiting.cut))
order(eruptions.byint)
eruptions.byint <- cbind(table(waiting.cut))
order(eruptions.byint)
eruptions.byint[order(eruptions.byint, decreasing = 1),]
eruptions.byint <- cbind(table(waiting.cut))
eruptions.byint
eruptions.byint[order(eruptions.byint, decreasing = 1),]
eruptions.byint[order(eruptions.byint, decreasing = 1),][1]
eruptions
faithful
hist(faithful$eruptions)
hist(faithful$eruptions, breaks = seq(40,100,by=5))
hist(faithful$eruptions)
hist(faithful$eruptions, breaks = seq(1.5,5.5,by=.5))
hist(faithful$eruptions, breaks = seq(1.5,5.5,by=.5))
hist(faithful$eruptions)
hist(faithful$eruptions, breaks = seq(1.5,5.5,by=.5))
hist(faithful$eruptions, breaks = seq(1.5,5.5,by=.25))
hist(faithful$eruptions, main= "Histogram of duration")
hist(faithful$eruptions, main= "Histogram of duration", xlab="duration in seg")
hist(faithful$eruptions, main= "Histogram of duration", xlab="duration in seg", col='blue')
hist(faithful$eruptions, main= "Histogram of duration", xlab="duration in seg", col='blue', density=.5)
hist(faithful$eruptions, main= "Histogram of duration", xlab="duration in seg", col='blue', density=2)
hist(faithful$eruptions, main= "Histogram of duration", xlab="duration in seg", col='blue', density=20)
hist(faithful$eruptions, main= "Histogram of duration", xlab="duration in seg", col='blue', density=80)
hist(faithful$eruptions, main= "Histogram of duration", xlab="duration in seg", col='blue', density=50)
hist(faithful$waiting)
hist(faithful$waiting, main= "Histogram of waiting", xlab="waiting in seg", col='gree', density=50)
hist(faithful$waiting, main= "Histogram of waiting", xlab="waiting in seg", col='green', density=50)
plot(faithful)
install.packages('magrittr')
install.packages('readr')
library(readr)
library(dplyr)
library(tidyr)
install.packages('tidyr')
library(readr)
library(dplyr)
library(tidyr)
ratings <-  read_delim("../datos/ml-1m/ratings.dat",delim = "::",
col_names = FALSE
) %>%
select(X1,X3,X5,X7) %>%
rename(
UserID = X1,
MovieID = X3,
Rating = X5,
Timestamp = X7
)
setwd("~/00_dsc/Repository/Master-in-Data-Science/R/recomendacion")
peliculas <-  read_delim("../datos/ml-1m/movies.dat",delim = "::",
col_names = FALSE
) %>%
select(X1,X3,X5) %>%
rename(
MovieID = X1,
Title = X3,
Genres = X5
)
